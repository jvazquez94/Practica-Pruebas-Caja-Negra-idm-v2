# Practica-Pruebas-Caja-Negra-idm-v2
Práctica prueba caja negra en pareja (la hago solo)

1)Bisiestos
  Para este caso al ser primero y muy sencillo desarrolle el SUT primero. Un número bisiesto tiene que ser divisible por 4 y por 100 o por 400 para que sea bisiesto.
  Es por ello que con dos simples estructuras de control if se puede desarrollar el código.
  Para los test he programado 4 casos sencillos de condiciones, uno un año bisiesto correcto para saber que funciona correctamente, luego otro incorrectom un caso frontera como es   el 0 y un número negativo que sería un valor invalido como año.
  
2)Romanos
Lo primero fue definir la clase RomanosTest para después implementar el SUT.
Empezamos por definir varios test de los cuales fueron algunos más de los que se ha añadido al final.
Debido al tiempo que me suponía desarrollar más código para mejorarlo, decidí implementar lo básico para la conversión a base 10 de los números Romanos.
Es por ello, que hay 3 test, uno para identificar si el símbolo introducido es correcto, es decir, identifica si son letras romanas inexistentes. Otro para 
distinguir si el String de entrada es null. Y el último test para distinguir si hay más de 3 símbolos seguidos  ya que eso es incorrecto.
Por otro lado, el SUT me empezó a llevar más tiempo de lo normal debido a la cantidad de limitaciones que le habia asignado al test, dando lugar a múltiples
fallos de compilación. Por ello reduje el test a condiciones básicas y a una conversión sin mucha complejidad asignando a cada letra romana un valor y guardandolo
en el anterior para proceder a sumar  o restar.

3)Embotelladora
Lo primero como dice en la práctica definimos las caracterizaciones de los test. Para este he definido 5. C1, C1.b, C2, C2.b y C3, los cuales están definidos dentro del codigo de java con comentarios. En resumen he definido caracterizaciones para cuando no haya botellas suficientes.
Con respecto al SUT he implementado de forma básica el algoritmo para que te devuelva el número de botellas pequeñas usadas minimizando su uso, como dice en el enunciado; de forma que se tenga en cuenta primero las condiciones que llevan a error, para descartar posibles fallos a posteriori con estructuras de control.

4)Blackfriday
Como hablamos en clase para este ejercicio hay que modificar el SUT para añadir el parametro de la fecha ya que es indispensable para aplicar el precio en el
día en cuestión 29-11.
Para este caso hemos desarrollado con normalidad todo excepto para el C1 que tenemos un caso excepcional, ya que si no es 29-11 no se aplica el descuento. Lo que he
implementado para ello es usando la funcion compare() de java.lang.Double da 0 comparando el precio descontado si es black friday y el original son iguales, y -1 si por lo tanto son diferentes debido a que se ha aplicado el descuento porque estamos en ese día en cuestión. Esta es un solució que he encontrado para cuando no sea 29 de noviembre.
Para el resto he procedido igual creando de hecho una funcion externa que me dice si la fecha es un día valido o mes valido jugando con las centenas y las decenas.
